==============================================================================
3. Rope 支持 ~
                                                                   *pymode-rope*

Pymode supports Rope refactoring operations, code completion and code assists.
pymode 支持 Rope 重建库操作，代码编译以及编写代码时的一些辅助功能。
Commands:
命令：
|:PymodeRopeAutoImport| -- Resolve import for element under cursor
|:PymodeRopeAutoImport| -- Resolve import for element under cursor
|:PymodeRopeModuleToPackage| -- Convert current module to package
|:PymodeRopeNewProject| -- Open new Rope project in current working directory
|:PymodeRopeRedo| -- Redo changes from last refactoring
|:PymodeRopeRegenerate| -- Regenerate the project cache
|:PymodeRopeRenameModule| -- Rename current module
|:PymodeRopeUndo| -- Undo changes from last refactoring


Turn on the rope script                                        *'g:pymode_rope'*
打开rope脚本（开启rope支持）
>
    let g:pymode_rope = 1

.ropeproject Folder ~
                                                                  *.ropeproject*
.ropeproject 文件夹 ~                                                                 


*:PymodeRopeNewProject* [<path>] -- Open new Rope project in the given path
*:PymodeRopeNewProject* [<path>] -- 在给出路径中打开新的Rope项目
*:PymodeRopeRegenerate* -- Regenerate the project cache
*:PymodeRopeRegenerate* -- 重构项目缓存
Rope uses a folder inside projects for holding project configuration and data.
Its default name is `.ropeproject`. It is recommended that you do not add the
.ropeproject folder to version control system.
Rope 利用项目架构中的一个文件夹来组织项目中的配置和数据。
其文件夹的默认名称是'.ropeproject'.这里建议你不要把.ropeproject文件夹添加到版本
控制系统里。



Currently it is used for things such as:

* The config.py file in this folder contains project configuration. Have
    a look at the default config.py file (which is created when it
    does not exist) for more information.
* It can be used for saving project history, so that the next time you open the
    project you can undo past changes.
* It can be used to save information about object inferences.
* It can be used to save a global name cache, which is used for auto-import.

* 在这个文件夹中，文件config.py包含项目的配置信息。 查看一下默认的config.py文件
    （自动生成）来了解更多的信息。
* 能够保存项目修改历史，这样当您下一次打开项目时，您能够还原之前的更改。
* 能够保存对象**信息。
* 能够保存一个全局命名缓存，这个全局命名缓存被用来自动引入。














By default, if `.ropeproject` is not found in the current directory, rope will
look recursively for it in parent folders.
默认情况下，如果文件`.ropeproject`在当前目录下没有找到，rope将递归地在上一层目录进行
查找。

Warning: If rope finds `.ropeproject` in a parent dir, it will use it with
all its child directories, which may slow scanning down (because of many,
possibly unrelated, files)
警告：如果rope在父目录查找到文件`.ropeproject`，rope将会使用父目录下的所有子目录，
这可能会降低扫描速度（因为父目录下有太多的文件可能与项目无关）

Enable searching for |.ropeproject| in parent directories
使能在父目录下查找|.ropeproject|的功能。
                                                  *'g:pymode_rope_lookup_project'*
>
    let g:pymode_rope_lookup_project = 0

You can also manually set the rope project directory. If not specified rope will
use the current directory.
你也可以手动指定rope项目的目录，如果不指定，rope将使用当前目录。                                      
                                                  *'g:pymode_rope_project_root'*
>
    let g:pymode_rope_project_root = ""


The location of the `.ropeproject` folder may also be overridden if you wish to
keep it outside of your project root. The rope library treats this folder as a
project resource, so the path will always be relative to your project root (a
leading '/' will be ignored). You may use `'..'` path segments to place the
folder outside of your project root.





                                                 *'g:pymode_rope_ropefolder'*
>
    let g:pymode_rope_ropefolder='.ropeproject'



Show documentation for element under cursor ~
在光标下显示元素文档

Show documentation for object under cursor.      *'g:pymode_rope_show_doc_bind'*
在光标下显示对象文档
Leave empty to disable the key binding.
=后留空可以关闭键绑定
>
    let g:pymode_rope_show_doc_bind = '<C-c>d'

Regenerate project cache on every save (if file has been modified)
>
每次保存时重构项目缓存（如果文件被修改）

    let g:pymode_rope_regenerate_on_write = 1

------------------------------------------------------------------------------
4.1 Completion ~
    代码补全                                                         *pymode-completion*

By default you can use <Ctrl-Space> for autocompletion. The first entry will
be automatically selected and you can press <Return> to insert the entry in
your code. <C-X><C-O> and <C-P>/<C-N> works too.
默认情形下，您能够使用<Ctrl-Space> 键来实现代码补全功能。第一个条目将被自动选中，
您可以在编辑代码时使用 <Return> 键来插入这个条目，<C-X><C-O> 和 <C-P>/<C-N> 
键也能使用。

Autocompletion is also called by typing a period in |Insert| mode by default.
默认情形下，代码补全功能也能在|插入|模式下用.键来实现

Turn on code completion support in the plugin       *'g:pymode_rope_completion'*
>
打开插件的代码补全功能
    let g:pymode_rope_completion = 1

Turn on autocompletion when typing a period
    当按下.键时打开代码补全功能
                                               *'g:pymode_rope_complete_on_dot'*
>
    let g:pymode_rope_complete_on_dot = 1

Keymap for autocomplete                        *'g:pymode_rope_completion_bind'*
> 代码补全功能键布局
    let g:pymode_rope_completion_bind = '<C-Space>'

Extended autocompletion (rope could complete objects which have not been
imported) from project                              *'g:pymode_rope_autoimport'*
>
    let g:pymode_rope_autoimport = 0

Load modules to autoimport by default       *'g:pymode_rope_autoimport_modules'*
>
    let g:pymode_rope_autoimport_modules = ['os', 'shutil', 'datetime'])

Offer to unresolved import object after completion.
>
    let g:pymode_rope_autoimport_import_after_complete = 0


------------------------------------------------------------------------------
4.2 Find definition ~
                                                            *pymode-rope-findit*

By default when you press *<C-C>g* on any object in your code you will be moved
to definition. 
Leave empty for disable key binding.      *'g:pymode_rope_goto_definition_bind'*
>
    let g:pymode_rope_goto_definition_bind = '<C-c>g'

Command for open window when definition has been found
Values are (`e`, `new`, `vnew`)                  *'g:pymode_rope_goto_definition_cmd'*
>
    let g:pymode_rope_goto_definition_cmd = 'new'

------------------------------------------------------------------------------
4.3 Refactoring ~
                                                       *pymode-rope-refactoring*

Rename method/function/class/variable in the project ~

Pymode can rename everything: classes, functions, modules, packages, methods,
variables and keyword arguments.

Keymap for rename method/function/class/variables under cursor
                                                   *'g:pymode_rope_rename_bind'*
>
    let g:pymode_rope_rename_bind = '<C-c>rr'


Rename a current module/package ~

*:PymodeRopeRenameModule* -- Rename current module

Keymap for rename current module            *'g:pymode_rope_rename_module_bind'*
>
    let g:pymode_rope_rename_module_bind = '<C-c>r1r'


Imports ~

*:PymodeRopeAutoImport* -- Resolve import for element under cursor

Organize imports sorts imports, too. It does that according to PEP8. Unused
imports will be dropped.
Keymap                                   *'g:pymode_rope_organize_imports_bind'*
>
    let g:pymode_rope_organize_imports_bind = '<C-c>ro'

Insert import for current word under cursor    *'g:pymode_rope_autoimport_bind'*
Should be enabled |'g:pymode_rope_autoimport'|
>
    let g:pymode_rope_autoimport_bind = '<C-c>ra'


Convert module to package ~
                                        *'g:pymode_rope_module_to_package_bind'*

*:PymodeRopeModuleToPackage* -- convert current module to package

Keybinding:
>
    let g:pymode_rope_module_to_package_bind = '<C-c>r1p'


Extract method/variable ~
                                                           *pymode-rope-extract*

Extract method/variable from selected lines.

                                           *'g:pymode_rope_extract_method_bind'*
                                         *'g:pymode_rope_extract_variable_bind'*
>
    let g:pymode_rope_extract_method_bind = '<C-c>rm'
    let g:pymode_rope_extract_variable_bind = '<C-c>rl'


Use function ~
                                                               *pymode-rope-use*

It tries to find the places in which a function can be used and changes the
code to call it instead.
>
    let g:pymode_rope_use_function_bind = '<C-c>ru'


Move method/fields ~
                                                              *pymode-rope-move*

It happens when you perform move refactoring on a method of a class. In this
refactoring, a method of a class is moved to the class of one of its
attributes. The old method will call the new method. If you want to change all
of the occurrences of the old method to use the new method you can inline it
afterwards.
>
    let g:pymode_rope_move_bind = '<C-c>rv'

Change function signature ~
>
    let g:pymode_rope_change_signature_bind = '<C-c>rs'


------------------------------------------------------------------------------
4.4 Undo/Redo changes ~
                                                              *pymode-rope-undo* 
                                                              *pymode-rope-redo*

Commands:

*:PymodeRopeUndo* -- Undo last changes in the project
*:PymodeRopeRedo* -- Redo last changes in the project


==============================================================================
5. Syntax ~
                                                                 *pymode-syntax*

Turn on pymode syntax                                        *'g:pymode_syntax'*
>
    let g:pymode_syntax = 1

Slower syntax synchronization that is better at handling code blocks in
docstrings. Consider disabling this on slower hardware.
                                                   *'g:pymode_syntax_slow_sync'*
>
    let g:pymode_syntax_slow_sync = 1

Enable all python highlights                          *'g:pymode_syntax_all'*
>
    let g:pymode_syntax_all = 1

Highlight "print" as a function            *'g:pymode_syntax_print_as_function'*
>
    let g:pymode_syntax_print_as_function = 0

Highlight "async/await" keywords       *'g:pymode_syntax_highlight_async_await'*
>
    let g:pymode_syntax_highlight_async_await = g:pymode_syntax_all

Highlight '=' operator              *'g:pymode_syntax_highlight_equal_operator'*
>
    let g:pymode_syntax_highlight_equal_operator = g:pymode_syntax_all

Highlight '*' operator              *'g:pymode_syntax_highlight_stars_operator'*
>
    let g:pymode_syntax_highlight_stars_operator = g:pymode_syntax_all

Highlight 'self' keyword                      *'g:pymode_syntax_highlight_self'*
>
    let g:pymode_syntax_highlight_self = g:pymode_syntax_all

Highlight indent's errors                      *'g:pymode_syntax_indent_errors'*
>
    let g:pymode_syntax_indent_errors = g:pymode_syntax_all

Highlight space's errors                        *'g:pymode_syntax_space_errors'*
>
    let g:pymode_syntax_space_errors = g:pymode_syntax_all

Highlight string formatting                 *'g:pymode_syntax_string_formatting'*
                                               *'g:pymode_syntax_string_format'*
                                            *'g:pymode_syntax_string_templates'*
                                                    *'g:pymode_syntax_doctests'*
>
    let g:pymode_syntax_string_formatting = g:pymode_syntax_all
    let g:pymode_syntax_string_format = g:pymode_syntax_all
    let g:pymode_syntax_string_templates = g:pymode_syntax_all
    let g:pymode_syntax_doctests = g:pymode_syntax_all

Highlight builtin objects (True, False, ...)    *'g:pymode_syntax_builtin_objs'*
>
    let g:pymode_syntax_builtin_objs = g:pymode_syntax_all

Highlight builtin types (str, list, ...)       *'g:pymode_syntax_builtin_types'*
>
    let g:pymode_syntax_builtin_types = g:pymode_syntax_all

Highlight exceptions (TypeError, ValueError, ...) 
                                        *'g:pymode_syntax_highlight_exceptions'*
>
    let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all

Highlight docstrings as pythonDocstring (otherwise as pythonString)
                                                  *'g:pymode_syntax_docstrings'*
>
    let g:pymode_syntax_docstrings = g:pymode_syntax_all


==============================================================================
